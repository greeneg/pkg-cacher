#!/usr/bin/env perl

=head1 NAME

 pkg-cacher - WWW proxy optimized for use with Linux Distribution Repositories

 Copyright (C) 2005 Eduard Bloch <blade@debian.org>
 Copyright (C) 2007 Mark Hindley <mark@hindley.org.uk>
 Copyright (C) 2008-2013 Robert Nelson <robertn@the-nelsons.org>

 Forked by Gary Greene <greeneg@tolharadys.net>
 Copyright (C) 2023 Gary Greene <greeneg@tolharadys.net>

 Distributed under the terms of the GNU Public Licence (GPL).

=cut
# ----------------------------------------------------------------------------

package main {
    use strictures;
    use English;
    use utf8;

    use feature ":5.28";
    use feature 'lexical_subs';
    use feature 'signatures';
    no warnings "experimental::signatures";

    use boolean;

    use Fcntl qw(:DEFAULT :flock);

    use IO::Socket::INET;
    use HTTP::Response;
    use HTTP::Date;

    use Sys::Hostname;

    use File::Path;

    use FindBin;
    use lib "$FindBin::RealBin/.";

    # Include the library for the config file parser
    use PkgCacher;
    use PkgCacher::Config;
    use PkgCacher::FileIO;
    use PkgCacher::Request;

    # Set some defaults
    my $pkg_cacher;
    my $pkg_cacher_config = PkgCacher::Config->new();
    my $pc_fio = PkgCacher::FileIO->new();
    my $pkg_request;

    my $configfile_default = '/etc/pkg-cacher/pkg-cacher.conf';

    our $configfile = $configfile_default;

    my $mode='sa'; # cgi|inetd|sa

    my $exlockfile = undef;

    # Needs to be global for &setup_ownership
    our $cfg;
    our %pathmap;

    my @extraconfig;

    my ($aclog_fh, $erlog_fh);
    my $con;

    # List of sockets listening, one for each daemon address
    my @daemons;
    my $server_pid;

    my @childPids;
    my $terminating;

    # Subroutines

    sub setup ($redo) {
        say STDERR "In sub: ". (caller(0))[3] if $ENV{'DEBUG'};
        my $pidfile;
        my $chroot;
        my $retnum;
        my $do_fork_away;
        my $newcfg;

        if (not $redo) {
            if ($ENV{'CGI_MODE'}) {
                # yahoo, back to the roots, CGI mode
                $mode = 'cgi';
            } else {
                local @ARGV = @ARGV; # Use a copy so @ARGV not destroyed
                while (scalar (@ARGV)) {
                    my $arg = shift(@ARGV);

                    if (-f '/etc/pkg-cacher/pkg-cacher.conf') {
                        $configfile = '/etc/pkg-cacher/pkg-cacher.conf';
                    } elsif (-f "$FindBin::RealBin/../../etc/pkg-cacher/pkg-cacher.conf") {
                        $configfile = "$FindBin::RealBin/../../etc/pkg-cacher/pkg-cacher.conf";
                    }

                    if ($arg eq '-c') {
                        $configfile = shift(@ARGV);
                        die "$configfile unreadable" if not -r $configfile;
                    } elsif ($arg eq '-r') {
                        $chroot = shift(@ARGV);
                        die "No such directory: $chroot\n" if not -d $chroot;
                    } elsif ($arg eq '-R') {
                        $retnum = shift(@ARGV);
                    } elsif ($arg eq '-i') {
                        $mode = 'inetd';
                    } elsif ($arg eq '-d') {
                        $do_fork_away = 1;
                    } elsif ($arg eq '-p') {
                        $pidfile = shift(@ARGV);
                    } elsif ($arg =~ /(\S+)=(\S+)/) {
                        push(@extraconfig, $1, $2);
                    } elsif ($arg eq '-h' || $arg eq '--help') {
                        print <<EOM;
USAGE: $0 <options> <override(s)>
Options:

-c configfile   Custom config file (default: $configfile_default)
-i              Inetd mode, STDIN and STDOUT are used for service
(default: standalone server mode)
-d              become a background daemon

Advanced options (root only):
-r directory    (experimental option)
	path to chroot to after reading the config and opening the log
	files. cache directory setting must be relative to the new root.
	WARNING: log files should be created before and be owned by tne
	effective user/group if -g or -u are used
-p pidfile      write the server process ID into this file

Overrides:     override config variables (see config file), eg. daemon_port=9999
EOM
                        exit 0;
                    } else {
                        die "Unknown parameter $arg\n";
                    }
                }
            }
        }

        eval {
            say STDERR "debug: config file: $configfile" if $ENV{'DEBUG'};
            $newcfg = $pkg_cacher_config->read_config($configfile);
        };

        # not sure what to do if we can't read the config file...
        die "Could not read config file: $@" if $@;

        if (not $redo) {
            $exlockfile = $pc_fio->define_global_lockfile("$newcfg->{cache_dir}/exlock");

            # Now set some things from the command line
            $newcfg->{'pidfile'} = $pidfile if $pidfile;
            $newcfg->{'fork'} = $do_fork_away if $do_fork_away;
            $newcfg->{'retry'} = $retnum if $retnum;
            $newcfg->{'chroot'} = $chroot if $chroot;
        }

        # override config values with the user-specified parameters
        my @extras = @extraconfig;
        while (@extras) {
            my $k = shift(@extras);
            my $v = shift(@extras);
            $newcfg->{$k} = $v;
        }

        # allow cgi scripts to override configuration variables
        if ($mode eq 'cgi') {
            foreach my $key (keys %ENV) {
                if ($key =~ /^PKG_CACHER_([A-Z]+)$/) {
                    $newcfg->{lc $1} = $ENV{$key};
                }
            }
        }

        if (not $redo) {
            my $uid = $newcfg->{'user'} =~ /^\d+$/ ? $newcfg->{'user'} : getpwnam($newcfg->{'group'});
            my $gid = $newcfg->{'group'} =~ /^\d+$/ ? $newcfg->{'group'} : getgrnam($newcfg->{'group'});

            $cfg = $newcfg;

            $pkg_cacher  = PkgCacher->new($cfg, $exlockfile);
            # Ensure config is sane and filesystem is present and readable
            $pkg_cacher->check_install($cfg);

            # Die if it still failed
            die basename($0) . ": No $newcfg->{cache_dir} directory!\n" if (!-d "$newcfg->{cache_dir}");
        } else {
            # Only allow some configuration items to be overridden when config is reread
            my @reread_items = (
                'allowed_hosts', 'denied_hosts', 'allowed_hosts_6', 'denied_hosts_6',
                'offline_mode', 'expire_hours',
                'http_proxy', 'use_proxy', 'http_proxy_auth', 'use_proxy_auth',
                'https_proxy', 'https_proxy_auth', 'require_valid_ssl',
                'limit', 'debug', 'path_map'
            );

            foreach my $item (@reread_items) {
                $cfg->{$item} = $newcfg->{$item};
            }
        }

        if ($cfg->{'path_map'}) {
            say STDERR "path_map: $cfg->{'path_map'}" if $ENV{'DEBUG'};
            foreach my $path_entry (split(/\s*[,;]\s*/, $cfg->{'path_map'})) {
                say STDERR "info: path_entry: $path_entry" if $ENV{'DEBUG'};
                my @tmp = split(/\s+/, $path_entry);
                # must have at least one path and target
                next if ($#tmp < 1);
                my $key = shift(@tmp);
                $pathmap{$key} = [@tmp];
            }
        }
    }

    sub term_handler {
        say STDERR "In sub: ". (caller(0))[3] if $ENV{'DEBUG'};
        $terminating=1;

        # close all connections or shutdown the server if parent and kill
        $pkg_cacher->debug_message($cfg, 'received SIGTERM, terminating: LINE: '. __PACKAGE__ .':'. __LINE__);
        $con->close if defined($con);

        if ($server_pid && $server_pid == $$) {
            for my $p (@daemons) {$p->shutdown(2)};
        }

        for my $children (@childPids) {
            $pkg_cacher->debug_message($cfg, "killing subprocess: $children: LINE: ". __PACKAGE__ .':'. __LINE__);
            kill 15, $children;
        };
        exit 0;
    }

    sub reload_config {
        say STDERR "In sub: ". (caller(0))[3] if $ENV{'DEBUG'};
        info_message('Got SIGHUP, reloading config');
        setup(1);
    }

    sub toggle_debug {
        say STDERR "In sub: ". (caller(0))[3] if $ENV{'DEBUG'};
        $cfg->{'debug'} = not $cfg->{'debug'};
        info_message('Got SIGUSR1, ' . ($cfg->{'debug'} ? 'en':'dis') . 'abling debug output');
    }

    # Jon's extra stuff to write the event to a log file.
    sub writeaccesslog {
        say STDERR "In sub: ". (caller(0))[3] if $ENV{'DEBUG'};
        my $cache_status = shift;
        my $filename = shift;
        my $filesize = shift;
        my $client = shift;

        # The format is 'time|cache status (HIT, MISS or EXPIRED)|client IP address|file size|name of requested file'
        my $time = localtime;

        flock($aclog_fh, LOCK_EX);
        say $aclog_fh "$time|$PROCESS_ID|$client|$cache_status|$filesize|$filename";
        flock($aclog_fh, LOCK_UN);
    }

    sub io_socket_inet46 (@args) {
        say STDERR "In sub: ". (caller(0))[3] if $ENV{'DEBUG'};
        # Test if IPv6 is available and use if it is
        if (eval{require IO::Socket::INET6}) {
            import IO::Socket::INET6;
            $pkg_cacher->debug_message($cfg, 'Using IPv6: LINE: '. __PACKAGE__ .':'. __LINE__);
            return  IO::Socket::INET6->new(@args);
        } else {
            $pkg_cacher->debug_message($cfg, 'Using IPv4: LINE: '. __PACKAGE__ .':'. __LINE__);
            return IO::Socket::INET->new(@args);
        }
    }

    # BEGIN MAIN PART

    sub main (@args) {
        say STDERR "In sub: ". (caller(0))[3] if $ENV{'DEBUG'};
        # Read config and command line, setup variables
        setup(0);

        # Output data as soon as we print it
        $| = 1;

        $pkg_request = PkgCacher::Request->new($cfg, $exlockfile, \%pathmap);

        #Signal Handlers
        say STDERR "Info: Setting UNIX signal handlers" if $ENV{'DEBUG'};
        $SIG{CHLD} = 'IGNORE';
        $SIG{TERM} = \&term_handler;
        $SIG{HUP} = \&reload_config;
        $SIG{USR1} = \&toggle_debug;
        $SIG{PIPE} = sub { $pkg_cacher->debug_message($cfg, "Got SIGPIPE!") };

        if ($mode eq 'cgi' && defined($cfg->{cgi_advise_to_use}) && $cfg->{cgi_advise_to_use}) {
            print "Status: 410 $cfg->{cgi_advise_to_use}\r\n\r\n";
            exit 0;
        }

        if ($mode ne 'sa') {
            open (STDERR, '>/dev/null') || die $!;
            $pkg_cacher->setup_ownership();
            $pkg_cacher->open_log_files();
            $pkg_request->handle_connection($mode);
            exit 0;
        }

        $server_pid = $PROCESS_ID;

        say STDERR "Info: Checking for daemon address" if $ENV{'DEBUG'};
        my $daemon;
        unless (exists $cfg->{'daemon_addr'}) {
            $cfg->{'daemon_addr'} = "0.0.0.0";
        }
        foreach my $daemon_addr ($cfg->{'daemon_addr'}) {
            my %daemonopts = ( LocalPort => $cfg->{'daemon_port'},
                               Proto => 'tcp',
                               Listen => 1,
                               ReuseAddr => 1);
            if (defined $daemon_addr) {
                $daemonopts{'LocalAddr'} = $daemon_addr;
            }

            my $retnum = $cfg->{'retry'};
            while (true) {
                say STDERR "Info: Attempting to bind to address $daemon_addr" if $ENV{'DEBUG'};
                $daemon = io_socket_inet46(%daemonopts);
                last if $daemon;
                $retnum--;
                last if ($retnum <= 0);
                say STDERR "Unable to bind socket ($daemon_addr port $cfg->{daemon_port}), trying again in 5 seconds"  if $ENV{'DEBUG'};
                sleep 5;
            }
            if (not $daemon) {
                say 'Unable to bind socket (' . (
                defined($daemon_addr) ? $daemon_addr.' ' : ''
                ) . "port $cfg->{'daemon_port'} ), " . basename($0) . " not started";
                exit 1;
            } else {
                say "Bound to $daemon_addr at $cfg->{'daemon_port'}" if $ENV{'DEBUG'};
                push @daemons, $daemon;
            }

            my $last;
            if (not $daemon_addr || $cfg->{'daemon_addr'} =~ /$daemon_addr[\s,;]*$/) {
                # last, empty or only address
                $last = 1;
                say STDERR "Info: Forking: $cfg->{'fork'}" if $ENV{'DEBUG'};
                goto NO_FORK unless $cfg->{'fork'};
            }
            if ($cfg->{'fork'}) {
                $pkg_cacher->debug_message($cfg, 'fork listener ' . (defined($daemon_addr) ? $daemon_addr : '') . ": LINE: ". __LINE__);
                my $pid = fork(); # for each daemon_addr
                if ($pid < 0) {
                    $pkg_cacher->barf('fork() failed');
                }
                if ($pid > 0) {
                    # parent
                    push @childPids, $pid;
                    next;
                }
                # child
                undef @childPids;

                {
                    no warnings 'io'; # Silence the reopen warning
                    close (STDIN);
                    open (STDOUT, '>/dev/null') || die $!;
                    open (STDERR, '>/dev/null') || die $!;
                }
            } else {
                $pkg_cacher->debug_message($cfg, 'Not forking a listener: LINE: '. __PACKAGE__ .':'. __LINE__);
            }

            NO_FORK:
            if ($cfg->{'pidfile'} && $last) {
                open(my $fh, ">$cfg->{'pidfile'}") || die "Unable to open $cfg->{'pidfile'}, $!";
                print $fh $$;
                close $fh;
            }

            $pkg_cacher->setup_ownership();
            $pkg_cacher->open_log_files($cfg);

            # State: READY
            # That is the working condition (daemon mode)

            $pkg_cacher->debug_message(
                $cfg,
                "Pkg-Cacher version $PkgCacher::VERSION started with Debug output enabled, accepting connections on " .
                  $daemon->sockhost . ':' . $daemon->sockport . ': LINE: '. __PACKAGE__ .':'. __LINE__
            );

            while (true) {
                my $newcon = $daemon->accept;
                # we don't stop, only by term_handler since the accept method is unreliable
                next if (!$newcon);
                last if $terminating;

                $pkg_cacher->debug_message($cfg, 'Connection from '.$newcon->peerhost.': LINE: '. __PACKAGE__ .':'. __LINE__);

                my $pid = fork();
                if ($pid < 0) {
                    $pkg_cacher->barf('fork() failed');
                }

                if ($pid > 0) {
                    # parent
                    $pkg_cacher->debug_message($cfg, "registered child process: $pid: LINE: ". __PACKAGE__ .':'. __LINE__);
                    push @childPids, $pid;
                    next;
                }
                # child
                undef @childPids;

                $pkg_request->handle_connection($mode, $newcon, $cfg);
                exit 0;
            }
        }

        # exit from the daemon loop
        exit 0;
    }
    main(@ARGV);
}
